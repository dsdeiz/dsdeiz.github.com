#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require 'compass'
require 'time'

Compass.add_project_configuration 'config.rb'

compile '/assets/sass/*/' do
  filter :sass, Compass.sass_engine_options
end

compile '/assets/sass/_*/' do
  # don't compile partials
end

compile '/assets/css/*/' do
  # don’t filter or layout
end

compile '/assets/js/*/' do
  # don’t filter or layout
end

compile '/gallery/*/' do
  # Galleries have identifiers /gallery/*. Only compile if extension is 'html'.
  if item[:extension] == 'html'
    filter :erb
    layout 'page'
  end
end

compile '/tags/*/' do
  layout 'tags'
end

compile '/blog/*/' do
  filter :redcarpet,
         :options => { :fenced_code_blocks => true },
         :renderer => MyHelper::CustomRenderer
  filter :colorize_syntax,
         :default_colorizer => :pygmentize
  layout 'post'
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    layout 'page'
  end
end

route '/gallery/*/' do
  if item[:extension] == 'html'
    item.identifier + 'index.html'
  else
    # no output for galleries
    nil
  end
end

route '/assets/sass/_*/' do
  # don't output partials, so return nil
  nil
end

route '/assets/sass/*/' do
  '/assets/css/' + item.identifier.chop[13..-1] + '.css'
end

route '/assets/css/*/' do
  item.identifier.chop + '.' + item[:extension]
end

route '/assets/js/*/' do
  item.identifier.chop + '.' + item[:extension]
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  elsif item[:kind] == 'article'
    require 'time'

    date = Time.parse(item[:created_at]).strftime('%F')
    '/blog/' + date + '-' + item.identifier[6..-1] + 'index.html'
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

preprocess do
  create_tag_items
end

layout '*', :erb
